{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from \"axios\";\nexport default {\n  name: \"prestataireSignupArtiste\",\n  data: () => {\n    return {\n      id_user: null,\n      id: null,\n      dateDebut: null,\n      dateFin: null,\n      selectedDate: null,\n      startHour: null,\n      endHour: null,\n      artists: null,\n      artist: null,\n      reserved: []\n    };\n  },\n  methods: {\n    goTo(path) {\n      this.$router.replace(path);\n    },\n    getData() {\n      this.id_user = this.$store.state.user.id;\n      this.id = this.$route.params.id;\n      let dateDebut = this.$store.state.manifestation.datedebut;\n      this.dateDebut = dateDebut.split('/')[2] + '-' + dateDebut.split('/')[1] + '-' + dateDebut.split('/')[0];\n      let dateFin = this.$store.state.manifestation.datefin;\n      this.dateFin = dateFin.split('/')[2] + '-' + dateFin.split('/')[1] + '-' + dateFin.split('/')[0];\n      axios({\n        method: 'get',\n        url: 'http://localhost:3000/prestataires/' + this.id_user + '/artiste/' + this.id + '/signup'\n      }).then(result => {\n        this.artists = result.data.data.artists;\n      }).catch(error => {\n        console.log(error);\n      });\n      axios({\n        method: 'get',\n        url: 'http://localhost:3000/prestataires/' + this.id_user + '/artiste/' + this.id\n      }).then(result => {\n        this.artist = result.data.data.artist;\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    changeSelectedDate() {\n      this.reserved = [];\n      let date = this.selectedDate.split('-')[2] + '/' + this.selectedDate.split('-')[1] + '/' + this.selectedDate.split('-')[0];\n      this.artists.forEach(a => {\n        if (a.date === date) this.reserved.push(a);\n      });\n    },\n    check() {\n      if (!this.startHour || !this.endHour) return false;\n      document.getElementById('artistStartHour').style.borderColor = 'black';\n      document.getElementById('artistEndHour').style.borderColor = 'black';\n      const [sH, sM] = this.startHour.split(':');\n      const [eH, eM] = this.endHour.split(':');\n      const START = new Date(2000, 0, 1, +sH, +sM, 0).getTime();\n      const END = new Date(2000, 0, 1, +eH, +eM, 0).getTime();\n      let check = true;\n      this.reserved.forEach(r => {\n        let [sH, sM] = r.starthour.split(':');\n        let [eH, eM] = r.endhour.split(':');\n        let startDate = new Date(2000, 0, 1, +sH, +sM, 0).getTime();\n        let endDate = new Date(2000, 0, 1, +eH, +eM, 0).getTime();\n        if (START > startDate && START < endDate) {\n          document.getElementById('artistStartHour').style.borderColor = 'red';\n          check = false;\n        }\n        if (START < startDate && END > startDate) {\n          document.getElementById('artistEndHour').style.borderColor = 'red';\n          check = false;\n        }\n      });\n      return check;\n    },\n    signup() {\n      if (this.check()) {\n        axios({\n          method: 'post',\n          url: 'http://localhost:3000/prestataires/' + this.id_user + '/artiste/' + this.id + '/signupPost',\n          data: {\n            id_manifestation: this.$store.state.manifestation.id,\n            date: this.selectedDate,\n            startHour: this.startHour,\n            endHour: this.endHour\n          }\n        }).then(result => {\n          this.$store.commit('setMessage', result.data);\n          this.getData();\n        }).catch(error => {\n          console.log(error);\n        });\n      } else this.$store.commit('setMessage', {\n        success: 0,\n        data: 'Votre groupe ne peux pas être inscrit sur des créneaux indisponibles'\n      });\n    },\n    cancel() {\n      if (confirm(this.$t('confirm.cancel'))) {\n        axios({\n          method: 'post',\n          url: 'http://localhost:3000/prestataires/' + this.id_user + '/artiste/' + this.id + '/cancelSignup',\n          data: {\n            id_manifestation: this.$store.state.manifestation.id\n          }\n        }).then(result => {\n          this.$store.commit('setMessage', result.data);\n          this.getData();\n        }).catch(error => {\n          console.log(error);\n        });\n      }\n    }\n  },\n  mounted() {\n    this.getData();\n  }\n};","map":{"version":3,"mappings":";AA2CA;AAEA;EACAA;EACAC;IACA;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;EACA;EACAC;IACAC;MAAA;IAAA;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;MACAC;QACAC;QACAC;MACA;QACA;MACA;QACAC;MACA;MACAH;QACAC;QACAC;MACA;QACA;MACA;QACAC;MACA;IACA;IACAC;MACA;MACA;MACA;QACA;MACA;IACA;IACAC;MACA;MACAC;MACAA;MACA;MACA;MACA;MACA;MACA;MACA;QACA;QACA;QACA;QACA;QACA;UACAA;UACAD;QACA;QACA;UACAC;UACAD;QACA;MACA;MACA;IACA;IACAE;MACA;QACAP;UACAC;UACAC;UACAhB;YACAsB;YACAC;YACAjB;YACAC;UACA;QACA;UACA;UACA;QACA;UACAU;QACA;MACA;QAAAO;QAAAxB;MAAA;IACA;IACAyB;MACA;QACAX;UACAC;UACAC;UACAhB;YACAsB;UACA;QACA;UACA;UACA;QACA;UACAL;QACA;MACA;IACA;EACA;EACAS;IAAA;EAAA;AACA","names":["name","data","id_user","id","dateDebut","dateFin","selectedDate","startHour","endHour","artists","artist","reserved","methods","goTo","getData","axios","method","url","console","changeSelectedDate","check","document","signup","id_manifestation","date","success","cancel","mounted"],"sourceRoot":"src/components/prestataires/artiste","sources":["prestataireSignupArtiste.vue"],"sourcesContent":["<template>\r\n  <div style=\"width: 80vw; margin: 10vh 10vw\">\r\n    <div v-if=\"artist.status === 'not_attributed'\" style=\"background-color: #3f4545; color: white; padding: 10px\">\r\n      <h1>{{$t('artiste.signup')}} \"{{this.artist.name}}\"</h1>\r\n      <div>\r\n        <h4>{{$t('attribute.date')}}</h4>\r\n        <input style=\"background-color: white; width: 100%\" v-on:change=\"changeSelectedDate\" v-model=\"selectedDate\" type=\"date\" :min=\"dateDebut\" :max=\"dateFin\" required>\r\n      </div>\r\n      <div v-if=\"selectedDate != null\">\r\n        <h4>{{$t('attribute.startHour')}}</h4>\r\n        <input id=\"artistStartHour\" style=\"background-color: white; width: 100%\" v-model=\"startHour\" type=\"time\" required>\r\n        <h4>{{$t('attribute.endHour')}}</h4>\r\n        <input id=\"artistEndHour\" style=\"background-color: white; width: 100%\" v-model=\"endHour\" type=\"time\" required>\r\n      </div>\r\n      <div style=\"color: red; text-align: center\" v-if=\"reserved.length > 0\">\r\n        <h2>{{$t('map.slots')}}</h2>\r\n        <p style=\"margin: 0\" v-for=\"(r,i) in reserved\" :key=\"'signup-artist-r-'+i\">{{ r.starthour }} - {{ r.endhour }}</p>\r\n      </div>\r\n      <div style=\"display: flex\">\r\n        <v-btn class=\"ma-2\" @click=\"goTo('/prestataire/artistes')\">{{ $t('button.back') }}</v-btn>\r\n        <div v-if=\"startHour != null && endHour != null\">\r\n          <v-btn v-on:click=\"signup\" class=\"ma-2\" dark>{{$t('button.signup')}}</v-btn>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div v-else>\r\n      <div style=\"background-color: #3f4545;margin: 10%;padding: 3%; text-align: center\">\r\n        <h1 style=\"color: white\">{{this.artist.name}}</h1>\r\n        <h2 v-if=\"this.artist.status === 'wait_attribution'\" style=\"color: orange\">{{$t('status.wait_attribution')}}</h2>\r\n        <h2 v-if=\"this.artist.status === 'attributed'\" style=\"color: green\">{{$t('status.attributed')}}</h2>\r\n        <h2 style=\"color: white\">{{this.artist.date}}</h2>\r\n        <h3 style=\"color: white\">{{$t('attribute.fromHour')}} {{this.artist.starthour}} {{$t('attribute.toHour')}} {{this.artist.endhour}}</h3>\r\n\r\n        <v-btn v-if=\"this.artist.cancel\" outlined disabled dark small @click=\"cancel\">{{ $t('button.cancelSignupInProgress') }}</v-btn>\r\n        <v-btn v-else color=\"red\" dark @click=\"cancel\">{{ $t('button.cancelSignup') }}</v-btn>\r\n        <v-btn class=\"ma-2\" @click=\"goTo('/prestataire/artistes')\">{{ $t('button.back') }}</v-btn>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\r\nimport axios from \"axios\";\r\n\r\nexport default {\r\n  name: \"prestataireSignupArtiste\",\r\n  data:()=>{\r\n    return{\r\n      id_user:null,\r\n      id:null,\r\n      dateDebut:null,\r\n      dateFin:null,\r\n      selectedDate:null,\r\n      startHour:null,\r\n      endHour:null,\r\n      artists:null,\r\n      artist:null,\r\n      reserved:[]\r\n    }\r\n  },\r\n  methods: {\r\n    goTo(path){this.$router.replace(path)},\r\n    getData(){\r\n      this.id_user = this.$store.state.user.id\r\n      this.id = this.$route.params.id\r\n      let dateDebut = this.$store.state.manifestation.datedebut\r\n      this.dateDebut = dateDebut.split('/')[2]+'-'+dateDebut.split('/')[1]+'-'+dateDebut.split('/')[0]\r\n      let dateFin = this.$store.state.manifestation.datefin\r\n      this.dateFin = dateFin.split('/')[2]+'-'+dateFin.split('/')[1]+'-'+dateFin.split('/')[0]\r\n      axios({\r\n        method: 'get',\r\n        url: 'http://localhost:3000/prestataires/'+this.id_user+'/artiste/'+this.id+'/signup'\r\n      }).then(result=>{\r\n        this.artists = result.data.data.artists\r\n      }).catch(error=>{\r\n        console.log(error)\r\n      })\r\n      axios({\r\n        method: 'get',\r\n        url: 'http://localhost:3000/prestataires/'+this.id_user+'/artiste/'+this.id\r\n      }).then(result=>{\r\n        this.artist = result.data.data.artist\r\n      }).catch(error=>{\r\n        console.log(error)\r\n      })\r\n    },\r\n    changeSelectedDate(){\r\n      this.reserved = []\r\n      let date = this.selectedDate.split('-')[2]+'/'+this.selectedDate.split('-')[1]+'/'+this.selectedDate.split('-')[0]\r\n      this.artists.forEach(a=>{\r\n        if(a.date === date) this.reserved.push(a)\r\n      })\r\n    },\r\n    check(){\r\n      if(!this.startHour || !this.endHour) return false\r\n      document.getElementById('artistStartHour').style.borderColor = 'black'\r\n      document.getElementById('artistEndHour').style.borderColor = 'black'\r\n      const [sH,sM] = this.startHour.split(':')\r\n      const [eH,eM] = this.endHour.split(':')\r\n      const START = new Date(2000, 0, 1, +sH, +sM, 0).getTime();\r\n      const END = new Date(2000, 0, 1, +eH, +eM, 0).getTime();\r\n      let check = true\r\n      this.reserved.forEach(r=>{\r\n        let [sH,sM] = r.starthour.split(':')\r\n        let [eH,eM] = r.endhour.split(':')\r\n        let startDate = new Date(2000, 0, 1, +sH, +sM, 0).getTime();\r\n        let endDate = new Date(2000, 0, 1, +eH, +eM, 0).getTime();\r\n        if(START > startDate && START < endDate) {\r\n          document.getElementById('artistStartHour').style.borderColor = 'red'\r\n          check = false\r\n        }\r\n        if(START < startDate && END > startDate) {\r\n          document.getElementById('artistEndHour').style.borderColor = 'red'\r\n          check = false\r\n        }\r\n      })\r\n      return check\r\n    },\r\n    signup(){\r\n      if(this.check()){\r\n        axios({\r\n          method: 'post',\r\n          url: 'http://localhost:3000/prestataires/'+this.id_user+'/artiste/'+this.id+'/signupPost',\r\n          data: {\r\n            id_manifestation: this.$store.state.manifestation.id,\r\n            date: this.selectedDate,\r\n            startHour: this.startHour,\r\n            endHour: this.endHour\r\n          }\r\n        }).then(result=>{\r\n          this.$store.commit('setMessage',result.data)\r\n          this.getData()\r\n        }).catch(error=>{\r\n          console.log(error)\r\n        })\r\n      }else this.$store.commit('setMessage',{success:0,data:'Votre groupe ne peux pas être inscrit sur des créneaux indisponibles'})\r\n    },\r\n    cancel(){\r\n      if(confirm(this.$t('confirm.cancel'))) {\r\n        axios({\r\n          method: 'post',\r\n          url: 'http://localhost:3000/prestataires/' + this.id_user + '/artiste/' + this.id + '/cancelSignup',\r\n          data: {\r\n            id_manifestation: this.$store.state.manifestation.id\r\n          }\r\n        }).then(result => {\r\n          this.$store.commit('setMessage', result.data)\r\n          this.getData()\r\n        }).catch(error => {\r\n          console.log(error)\r\n        })\r\n      }\r\n    }\r\n  },\r\n  mounted(){this.getData()}\r\n}\r\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}