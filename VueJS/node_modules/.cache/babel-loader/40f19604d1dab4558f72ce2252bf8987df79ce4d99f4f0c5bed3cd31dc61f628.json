{"ast":null,"code":"export const getGoogleUrl = from => {\n  const rootUrl = `https://accounts.google.com/o/oauth2/v2/auth`;\n  const options = {\n    redirect_uri: 'http://localhost:3000/auth/google/callback',\n    client_id: '606419346830-prkq4eqoskvqlb86tomev0q8igi879oi.apps.googleusercontent.com',\n    access_type: 'offline',\n    response_type: 'code',\n    prompt: 'consent',\n    scope: ['https://www.googleapis.com/auth/userinfo.profile', 'https://www.googleapis.com/auth/userinfo.email'].join(' '),\n    state: from\n  };\n  const qs = new URLSearchParams(options);\n  const authUrl = `${rootUrl}?${qs.toString()}`;\n  const authWindow = window.open(authUrl, \"_blank\", \"width=500,height=600\");\n  const closePromise = new Promise(resolve => {\n    const intervalId = setInterval(() => {\n      if (authWindow.closed) {\n        clearInterval(intervalId);\n        resolve();\n      }\n    }, 500);\n  });\n  closePromise.then(() => {\n    this.fetchUserData();\n  });\n\n  /*\r\n  <template>\r\n  <div>\r\n  <button @click=\"loginWithGoogle\">Login with Google</button>\r\n  </div>\r\n  </template>\r\n  <script>\r\n  export default {\r\n  methods: {\r\n  loginWithGoogle() {\r\n    const authUrl = \"http://localhost:3000/auth/google?from=/profile\";\r\n      // Open the authentication URL in a new window\r\n    const authWindow = window.open(authUrl, \"_blank\", \"width=500,height=600\");\r\n      // Create a Promise that resolves when the window is closed\r\n    const closePromise = new Promise(resolve => {\r\n      const intervalId = setInterval(() => {\r\n        if (authWindow.closed) {\r\n          clearInterval(intervalId);\r\n          resolve();\r\n        }\r\n      }, 500);\r\n    });\r\n      // Wait for the window to close and then fetch the user data\r\n    closePromise.then(() => {\r\n      this.fetchUserData();\r\n    });\r\n  },\r\n    fetchUserData() {\r\n    // Make an API call to fetch the user data\r\n    // ...\r\n  }\r\n  }\r\n  };\r\n  </script>\r\n     */\n};","map":{"version":3,"names":["getGoogleUrl","from","rootUrl","options","redirect_uri","client_id","access_type","response_type","prompt","scope","join","state","qs","URLSearchParams","authUrl","toString","authWindow","window","open","closePromise","Promise","resolve","intervalId","setInterval","closed","clearInterval","then","fetchUserData"],"sources":["C:/Users/maxim/OneDrive/Documents/Professional/IUTBM/IUTBM2/SAE/Belfunfair/VueJS/src/utils/getGoogleUrl.js"],"sourcesContent":["export const getGoogleUrl = (from) => {\r\n    const rootUrl = `https://accounts.google.com/o/oauth2/v2/auth`;\r\n\r\n    const options = {\r\n        redirect_uri: 'http://localhost:3000/auth/google/callback',\r\n        client_id: '606419346830-prkq4eqoskvqlb86tomev0q8igi879oi.apps.googleusercontent.com',\r\n        access_type: 'offline',\r\n        response_type: 'code',\r\n        prompt: 'consent',\r\n        scope: [\r\n            'https://www.googleapis.com/auth/userinfo.profile',\r\n            'https://www.googleapis.com/auth/userinfo.email',\r\n        ].join(' '),\r\n        state: from,\r\n    };\r\n\r\n    const qs = new URLSearchParams(options);\r\n    const authUrl = `${rootUrl}?${qs.toString()}`;\r\n\r\n    const authWindow = window.open(authUrl, \"_blank\", \"width=500,height=600\");\r\n\r\n    const closePromise = new Promise(resolve => {\r\n        const intervalId = setInterval(() => {\r\n            if (authWindow.closed) {\r\n                clearInterval(intervalId);\r\n                resolve();\r\n            }\r\n        }, 500);\r\n    });\r\n    \r\n    closePromise.then(() => {\r\n        this.fetchUserData();\r\n    });\r\n\r\n    /*\r\n    <template>\r\n  <div>\r\n    <button @click=\"loginWithGoogle\">Login with Google</button>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  methods: {\r\n    loginWithGoogle() {\r\n      const authUrl = \"http://localhost:3000/auth/google?from=/profile\";\r\n\r\n      // Open the authentication URL in a new window\r\n      const authWindow = window.open(authUrl, \"_blank\", \"width=500,height=600\");\r\n\r\n      // Create a Promise that resolves when the window is closed\r\n      const closePromise = new Promise(resolve => {\r\n        const intervalId = setInterval(() => {\r\n          if (authWindow.closed) {\r\n            clearInterval(intervalId);\r\n            resolve();\r\n          }\r\n        }, 500);\r\n      });\r\n\r\n      // Wait for the window to close and then fetch the user data\r\n      closePromise.then(() => {\r\n        this.fetchUserData();\r\n      });\r\n    },\r\n\r\n    fetchUserData() {\r\n      // Make an API call to fetch the user data\r\n      // ...\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n     */\r\n};"],"mappings":"AAAA,OAAO,MAAMA,YAAY,GAAIC,IAAI,IAAK;EAClC,MAAMC,OAAO,GAAI,8CAA6C;EAE9D,MAAMC,OAAO,GAAG;IACZC,YAAY,EAAE,4CAA4C;IAC1DC,SAAS,EAAE,0EAA0E;IACrFC,WAAW,EAAE,SAAS;IACtBC,aAAa,EAAE,MAAM;IACrBC,MAAM,EAAE,SAAS;IACjBC,KAAK,EAAE,CACH,kDAAkD,EAClD,gDAAgD,CACnD,CAACC,IAAI,CAAC,GAAG,CAAC;IACXC,KAAK,EAAEV;EACX,CAAC;EAED,MAAMW,EAAE,GAAG,IAAIC,eAAe,CAACV,OAAO,CAAC;EACvC,MAAMW,OAAO,GAAI,GAAEZ,OAAQ,IAAGU,EAAE,CAACG,QAAQ,EAAG,EAAC;EAE7C,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACJ,OAAO,EAAE,QAAQ,EAAE,sBAAsB,CAAC;EAEzE,MAAMK,YAAY,GAAG,IAAIC,OAAO,CAACC,OAAO,IAAI;IACxC,MAAMC,UAAU,GAAGC,WAAW,CAAC,MAAM;MACjC,IAAIP,UAAU,CAACQ,MAAM,EAAE;QACnBC,aAAa,CAACH,UAAU,CAAC;QACzBD,OAAO,EAAE;MACb;IACJ,CAAC,EAAE,GAAG,CAAC;EACX,CAAC,CAAC;EAEFF,YAAY,CAACO,IAAI,CAAC,MAAM;IACpB,IAAI,CAACC,aAAa,EAAE;EACxB,CAAC,CAAC;;EAEF;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}